# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gender', [dirname(__file__)])
        except ImportError:
            import _gender
            return _gender
        if fp is not None:
            try:
                _mod = imp.load_module('_gender', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gender = swig_import_helper()
    del swig_import_helper
else:
    import _gender
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


IS_FEMALE = _gender.IS_FEMALE
IS_MOSTLY_FEMALE = _gender.IS_MOSTLY_FEMALE
IS_MALE = _gender.IS_MALE
IS_MOSTLY_MALE = _gender.IS_MOSTLY_MALE
IS_UNISEX_NAME = _gender.IS_UNISEX_NAME
IS_A_COUPLE = _gender.IS_A_COUPLE
EQUIVALENT_NAMES = _gender.EQUIVALENT_NAMES
NOT_EQUAL_NAMES = _gender.NOT_EQUAL_NAMES
NAME_NOT_FOUND = _gender.NAME_NOT_FOUND
ERROR_IN_NAME = _gender.ERROR_IN_NAME
INTERNAL_ERROR_GENDER = _gender.INTERNAL_ERROR_GENDER
FIRST_NAME_FILE = _gender.FIRST_NAME_FILE
LENGTH_FIRST_NAME = _gender.LENGTH_FIRST_NAME
GENDER_COMPARE_EXPANDED_UMLAUTS = _gender.GENDER_COMPARE_EXPANDED_UMLAUTS
GENDER_TRACE_ALL_COUNTRIES = _gender.GENDER_TRACE_ALL_COUNTRIES
GENDER_TRACE_FULL_COUNTRY_NAME = _gender.GENDER_TRACE_FULL_COUNTRY_NAME
GENDER_ALLOW_COMPRESSED_UMLAUTS = _gender.GENDER_ALLOW_COMPRESSED_UMLAUTS
GENDER_ALLOW_COUPLE = _gender.GENDER_ALLOW_COUPLE
GENDER_TRACE_ONE_COUNTRY_ONLY = _gender.GENDER_TRACE_ONE_COUNTRY_ONLY
GENDER_TRACE_SHORT_COUNTRY_NAME = _gender.GENDER_TRACE_SHORT_COUNTRY_NAME
GC_ANY_COUNTRY = _gender.GC_ANY_COUNTRY
GC_BRITAIN = _gender.GC_BRITAIN
GC_IRELAND = _gender.GC_IRELAND
GC_USA = _gender.GC_USA
GC_SPAIN = _gender.GC_SPAIN
GC_PORTUGAL = _gender.GC_PORTUGAL
GC_ITALY = _gender.GC_ITALY
GC_MALTA = _gender.GC_MALTA
GC_FRANCE = _gender.GC_FRANCE
GC_BELGIUM = _gender.GC_BELGIUM
GC_LUXEMBOURG = _gender.GC_LUXEMBOURG
GC_NETHERLANDS = _gender.GC_NETHERLANDS
GC_GERMANY = _gender.GC_GERMANY
GC_EAST_FRISIA = _gender.GC_EAST_FRISIA
GC_AUSTRIA = _gender.GC_AUSTRIA
GC_SWISS = _gender.GC_SWISS
GC_ICELAND = _gender.GC_ICELAND
GC_DENMARK = _gender.GC_DENMARK
GC_NORWAY = _gender.GC_NORWAY
GC_SWEDEN = _gender.GC_SWEDEN
GC_FINLAND = _gender.GC_FINLAND
GC_ESTONIA = _gender.GC_ESTONIA
GC_LATVIA = _gender.GC_LATVIA
GC_LITHUANIA = _gender.GC_LITHUANIA
GC_POLAND = _gender.GC_POLAND
GC_CZECH_REP = _gender.GC_CZECH_REP
GC_SLOVAKIA = _gender.GC_SLOVAKIA
GC_HUNGARY = _gender.GC_HUNGARY
GC_ROMANIA = _gender.GC_ROMANIA
GC_BULGARIA = _gender.GC_BULGARIA
GC_BOSNIA = _gender.GC_BOSNIA
GC_CROATIA = _gender.GC_CROATIA
GC_KOSOVO = _gender.GC_KOSOVO
GC_MACEDONIA = _gender.GC_MACEDONIA
GC_MONTENEGRO = _gender.GC_MONTENEGRO
GC_SERBIA = _gender.GC_SERBIA
GC_SLOVENIA = _gender.GC_SLOVENIA
GC_ALBANIA = _gender.GC_ALBANIA
GC_GREECE = _gender.GC_GREECE
GC_RUSSIA = _gender.GC_RUSSIA
GC_BELARUS = _gender.GC_BELARUS
GC_MOLDOVA = _gender.GC_MOLDOVA
GC_UKRAINE = _gender.GC_UKRAINE
GC_ARMENIA = _gender.GC_ARMENIA
GC_AZERBAIJAN = _gender.GC_AZERBAIJAN
GC_GEORGIA = _gender.GC_GEORGIA
GC_KAZAKH_UZBEK = _gender.GC_KAZAKH_UZBEK
GC_TURKEY = _gender.GC_TURKEY
GC_ARABIA = _gender.GC_ARABIA
GC_ISRAEL = _gender.GC_ISRAEL
GC_CHINA = _gender.GC_CHINA
GC_INDIA = _gender.GC_INDIA
GC_JAPAN = _gender.GC_JAPAN
GC_KOREA = _gender.GC_KOREA
GC_VIETNAM = _gender.GC_VIETNAM

def get_gender(*args):
  return _gender.get_gender(*args)
get_gender = _gender.get_gender

def get_gender_unicode(*args):
  return _gender.get_gender_unicode(*args)
get_gender_unicode = _gender.get_gender_unicode

def get_gender_utf8(*args):
  return _gender.get_gender_utf8(*args)
get_gender_utf8 = _gender.get_gender_utf8

def check_nickname(*args):
  return _gender.check_nickname(*args)
check_nickname = _gender.check_nickname

def check_nickname_unicode(*args):
  return _gender.check_nickname_unicode(*args)
check_nickname_unicode = _gender.check_nickname_unicode

def check_nickname_utf8(*args):
  return _gender.check_nickname_utf8(*args)
check_nickname_utf8 = _gender.check_nickname_utf8

def find_similar_name(*args):
  return _gender.find_similar_name(*args)
find_similar_name = _gender.find_similar_name

def find_similar_name_unicode(*args):
  return _gender.find_similar_name_unicode(*args)
find_similar_name_unicode = _gender.find_similar_name_unicode

def find_similar_name_utf8(*args):
  return _gender.find_similar_name_utf8(*args)
find_similar_name_utf8 = _gender.find_similar_name_utf8

def cleanup_gender():
  return _gender.cleanup_gender()
cleanup_gender = _gender.cleanup_gender


